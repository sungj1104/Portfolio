정적 파일(static files)
- 사전적으로는 변화가 없는 파일
- 웹프레임워크에서 정적파일이란 프레임워크의 소스코드를 제외한 나머지 이미지, 동영상, CSS, JavaScript 파일 등
- 소스코드는 일반적으로 동적인 결과물을 만들어내는 데 사용
- 정적 파일은 사용자에게 변형 없이 언제나 동일한 형태로 제공됨
settings.py에서 적용
STATIC_URL = "static/" 아래에  STATICFILES_DIRS = [BASE_DIR / "static"] 를 작성주어 적용(여기서 BASE_DIR = WEB_PROJECT4를 뜻함

템플릿에서 정적파일 사용
- 템플릿에서 정적파일을 불러올 때는
-- {% static '정적파일경로' %} 태그를 사용

유저가 업로드하는 정적파일

정적파일의 분류
- Django에서 정적파일은 두 가지로 나뉨
-- 소스코드에 포함되는 정적파일
-- 유저가 업로드하는 정적파일

- 이전에 정적파일을 넣어뒀던 디렉터리는 소스코드에 포함되는 정적파일을 두는 곳
-- 프로젝트의 일부분으로 취급됨

- 유저가 업로드하는 정적파일은 프로젝트에 포함되지 않음
-- 블로그라는 전체 프로젝트와는 별개로 블로그를 사용하는 사용자들이 업로드하는 글에 포함된 이미지와 같은 데이터

유저가 업로드하는 정적파일 설정
- settings.py에서 소스코드에 포함되는 정적파일의 설정은 STATIC_로 시작하고, 유저가 업로드하는 정적 파일과 관련된 설정은 MEDIA_로 시작함

- MEDIA_URL
-- 유저가 업로드한 파일에 접근할 수 있도록 브라우저에 제공하는 경로 접두어
-- 소스코드에 포함되는 정적파일은 STATIC_URL 이라는 설정값을 사용하며, 기본값은 "/static/"

- MEDIA_ROOT
-- 실제로 유저가 업로드한 파일이 저장될 경로

동적 URL 경로
"posts/<int:post_id>/"

int : 정수 형태의 값을 받도록 제한한다는 의미
post_id : <와> 사이의 영역이 post_id 라는 이름을 가진다는 의미

post_detail(post_id=1)

사용자의 입력을 받는 Template
- HTML에서 사용자의 입력을 받는 요소는
-- 입력에 대한 제목 : <label>
-- 한 줄 짜리 텍스트 입력 : <input type="text">
-- 여러 줄 텍스트 입력 : <textarea>
-- 버튼 : <button>

- 사용자의 입력을 받는 요소는 form 태그로 감싼다
- div로 각각의 입력할 항목들을 감싸고, 내부에 label로 해당 항목의 이름을 표시

POST 요청에 대한 Forbidden 오류
- 403 Forbidden : 요청은 받았으나 그 요청을 처리할 권한이 없기 때문에 서버에서 거부함

- CSRF 공격
-- CSRF 인증에 실패하여 요청이 중단됨
-- CSRF : Cross-Site Request Forgery(사이트 간 요청 위조)

- Django에서 처리하는 GET과 POST 요청
-- 지금까지 CSRF 인증 오류가 발생하지 않은 이유는 Django가 데이터를 처리하는 방식이 GET/POST에 따라 다르기 때문
-- GET은 사이트의 특정 페이지에 접속하거나, 검색을 하는 등의 읽기/조회 행동을 수행하는데 쓰임
-- POST는 사이트의 특정 데이터를 변경/작성 하는데 쓰임
-- 따라서 Django는 POST 요청에 대해서 GET요청보다 더 높은 보안 수준을 적용

- Django의 CSRF 공격 방어기법
-- CSRF 공격 방어의 핵심은 로그인한 사용자가 의도하지 않은 POST 요청을 거부하는 것
	1. Django는 새로운 요청을 하는 브라우저마다 구분되는 값을 서버에 저장
	2. POST 요청을 하는 form이 브라우저 별로 구분되는 값을 가지지 않고 있다면 요청을 거부
-- 브라우저별로 구분되는 값은 서버에 저장되므로 브라우저를 이용하는 사람(이용자 또는 해커)은 그 값을 알 수 없음
	3. Template 파일에서 {% csrf_token %} 태그를 사용하면 이 영역은 브라우저별로 구분되는 값으로 치환됨

POST 데이터를 사용한 DB row 생성
- ORM을 사용해서 DB에 데이터를 생성할 때는 create 메서드를 사용
-- created_instance = 모델.objects.create(필드명=필드값)